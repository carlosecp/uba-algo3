TestCase subclass: #HorarioTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!HorarioTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 15:08'!test06AlImprimirUnHorarioSeRetornaEnElFormatoCorrecto	| horario |		horario := ( Horario new ) horario: 10 .		self assert: ( horario asString ) equals: '10' .! !!HorarioTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 14:26'!test03UnHorarioEnHorarioHabilTieneElMontoCorrecto	| horario montoHorarioHabilEsperado |		horario := Horario conMontoEnBaseAHorario: 10 .	montoHorarioHabilEsperado := 0.2 .		self assert: ( horario monto ) equals: montoHorarioHabilEsperado ! !!HorarioTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 14:33'!test05NoSePuedeCrearUnHorarioConMontoInvalido	self should: [ 		( Horario new ) monto: -10	] raise: MontoTarifaInvalido ! !!HorarioTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 14:27'!test04UnHorarioEnHorarioNoHabilTieneElMontoCorrecto	| horario montoNoHorarioHabilEsperado |		horario := Horario conMontoEnBaseAHorario: 1 .	montoNoHorarioHabilEsperado := 0.1 .		self assert: ( horario monto ) equals: montoNoHorarioHabilEsperado ! !!HorarioTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 14:33'!test01NoSePuedeCrearUnHorarioFueraDelRangoDeLas24Horas	self		should: [ ( Horario new ) horario: 0 ]		raise: HorarioInvalido.	self		should: [ ( Horario new ) horario: 25 ]		raise: HorarioInvalido! !!HorarioTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 14:25'!test02DosHorariosConMontoFijoYMismoMontoRetornanElMismoMonto	| montoFijo horario1 horario2 |		montoFijo := 10 .	horario1 := Horario conMontoFijo: montoFijo conHorario: 1 .	horario2 := Horario conMontoFijo: montoFijo conHorario: 15 .		self assert: ( horario1 monto ) equals: ( horario2 monto )	! !TestCase subclass: #LlamadaInternacionalTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 14:37'!test02AUnaLlamadaInternacionalDeLargaDuracionSeLeAplicaElDescuento	| costoEsperado llamada |		costoEsperado := 90 .	llamada := LlamadaInternacional conDuracion: 100 conHorario: 10 conTarifaInternacional: 1 conDestino: 'Nuketown' .		self assert: ( llamada costoTotal ) equals: costoEsperado ! !!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 14:37'!test04NoSePuedeCrearUnaLlamadaInternacionalConUnHorarioInvalido	self should: [		LlamadaInternacional conDuracion: 100 conHorario: -10 conTarifaInternacional: 1 conDestino: ''	] raise: HorarioInvalido! !!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 14:37'!test03NoSePuedeCrearUnaLlamadaInternacionalSinDestino	self should: [		LlamadaInternacional conDuracion: 100 conHorario: 10 conTarifaInternacional: 1 conDestino: ''	] raise: DestinoInvalido! !!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 14:37'!test01AlObtenerInformacionDeUnaLlamadaInternacionalSeObtieneLaInformacionCorrecta	| llamada |		llamada := LlamadaInternacional conDuracion: 10 conHorario: 10 conTarifaInternacional: 10 conDestino: 'Nuketown' .		self assert: ( llamada descripcion ) equals: 'La llamada se hizo a Nuketown a las 10 hs durando 10 minutos'	! !!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 14:37'!test05DosLlamadasInternacionalesDeMismaDuracionEnDistintosHorariosCuestanLoMismo	| llamada1 llamada2 |		llamada1 := LlamadaInternacional conDuracion: 30 conHorario: 1 conTarifaInternacional: 1 conDestino: 'Buenos Aires' .	llamada2 := LlamadaInternacional conDuracion: 30 conHorario: 10 conTarifaInternacional: 1 conDestino: 'La Plata' .		self assert: ( llamada1 costoTotal ) equals: ( llamada2 costoTotal )! !TestCase subclass: #LlamadaNacionalTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!LlamadaNacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 11:46'!test03LlamadaNacionalDeCortaDuracionDevuelveElCostoEsperado	| llamada costoEsperado |		costoEsperado := 2 .	llamada := LlamadaNacional conDuracion: 10 conHorario: 10 .		self assert: ( llamada costoTotal ) equals: costoEsperado	! !!LlamadaNacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 12:05'!test06LlamadaNacionalEnHorarioNoHabilTieneElCostoEsperado	| duracion llamada costoEsperado |		duracion := 10 .	llamada := LlamadaNacional conDuracion: duracion conHorario: 1 .	costoEsperado := duracion * 0.1 .		self assert: ( llamada costoTotal ) equals: costoEsperado .! !!LlamadaNacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 4/25/2022 00:35'!test01AlObtenerInformacionDeUnaLlamadaNacionalSeObtieneLaInformacionCorrecta	| llamada |		llamada := LlamadaNacional conDuracion: 10 conHorario: 10 .		self assert: ( llamada descripcion ) equals: 'La llamada se hizo a las 10 hs durando 10 minutos'	! !!LlamadaNacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 11:47'!test04LlamadaNacionalDeLargaDuracionDevuelveElCostoEsperado	| llamada costoEsperado |		costoEsperado := 7.2 .	llamada := LlamadaNacional conDuracion: 40 conHorario: 10 .		self assert: ( llamada costoTotal ) equals: costoEsperado	! !!LlamadaNacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 11:00'!test02NoSePuedeUnaLlamadaNacionalConUnHorarioInvalido	self should: [		LlamadaNacional conDuracion: 100 conHorario: -10	] raise: HorarioInvalido! !!LlamadaNacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 12:04'!test05LlamadaNacionalEnHorarioHabilTieneElCostoEsperado	| duracion llamada costoEsperado |		duracion := 10 .	llamada := LlamadaNacional conDuracion: duracion conHorario: 10 .	costoEsperado := duracion * 0.2 .		self assert: ( llamada costoTotal ) equals: costoEsperado .! !TestCase subclass: #TarifaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!TarifaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 14:32'!test04NoSePuedeCrearUnaTarifaConUnMontoInvalido	self		should: [ Tarifa				conDuracion: 10				conHorario: (Horario conMontoFijo: -10 conHorario: 10) ]		raise: MontoTarifaInvalido! !!TarifaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 15:04'!test02TarifaParaLlamadaDeMenosDe30MinutosNoEsTarifaDeLargaDuracion	| tarifa |		tarifa := Tarifa		conDuracion: 20		conHorario: (Horario conMontoFijo: 10 conHorario: 10) .			self deny: tarifa esDeLargaDuracion! !!TarifaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 14:30'!test05NoSePuedeCrearUnaTarifaConUnaDuracionInvalida	self		should: [ Tarifa				conDuracion: -10				conHorario: (Horario conMontoFijo: 10 conHorario: 10) ]		raise: DuracionInvalida! !!TarifaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 15:04'!test01TarifaParaLlamadaDeMasDe30MinutosEsTarifaDeLargaDuracion	| tarifa |		tarifa := Tarifa		conDuracion: 40		conHorario: (Horario conMontoFijo: 10 conHorario: 10) .			self assert: tarifa esDeLargaDuracion! !!TarifaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 15:04'!test03ElMontoSinDescuentoDeUnaTarifaEsElMontoDeLaTarifaPorLaDuracionDeLaLlamada	| tarifa monto duracion montoEsperado |		monto := 10 .	duracion := 10 .	montoEsperado := monto * duracion .		tarifa := Tarifa		conDuracion: duracion		conHorario: ( Horario conMontoFijo: 10 conHorario: 10 ).		self assert: tarifa calcularMontoBruto equals: montoEsperado! !!TarifaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/26/2022 15:20'!test06ElMontoDeDescuentoDeUnaTarifaEsElEsperado	| montoFijo montoBruto duracion tarifa montoDescuentoEsperado |		montoFijo := 1 .	duracion := 40 .		tarifa := Tarifa		conDuracion: duracion		conHorario: ( Horario conMontoFijo: montoFijo conHorario: 10 ) .		montoBruto := montoFijo * duracion .		montoDescuentoEsperado := montoBruto * 0.1 .		self assert: ( tarifa calcularDescuentoDeMontoBruto: montoBruto ) equals: montoDescuentoEsperado! !TestCase subclass: #TeleAlgoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!TeleAlgoTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 11:26'!test03SeRegistranLlamadasInternacionalesSinHaberEstablecidoUnaTarifaInternacionalEstasSeFacturanSinCosto	| abonoMensual teleAlgo |		abonoMensual := 100 .	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual .		teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 10 Hacia: 'Nuketown' .	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 10 Hacia: 'Kino der Toten' .		self assert: ( teleAlgo calcularGastoFinal ) equals: abonoMensual! !!TeleAlgoTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 11:26'!test01NoSePuedeCrearUnTeleAlgoConUnAbonoMensualNegativo	self should: [ 		TeleAlgo conAbonoMensual: -20	] raise: AbonoMensualInvalido ! !!TeleAlgoTest methodsFor: 'tests' stamp: 'CarlosCastillo 4/25/2022 00:31'!test05SeRegistranAlgunasLlamadasYSeCobraElMontoFinalEsperado	| montoEsperadoAPagar abonoMensual teleAlgo |		montoEsperadoAPagar := 203 .	abonoMensual := 100 .	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual .		teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 10 .		teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22 .	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17 .	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 10 Hacia: 'Yemen' .		self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar ! !!TeleAlgoTest methodsFor: 'tests' stamp: 'CarlosCastillo 4/25/2022 00:34'!test02SinLlamadasRegistradasAlBuscarLaLlamadaMasCostosaRealizadaSinHaberRegistradoLlamadas	| teleAlgo abonoMensual |		abonoMensual := 100 .	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual .	self should: [		teleAlgo consultarPorLlamadaEfectuadaMasCostosa	] raise: SinLlamadasRegistradas ! !!TeleAlgoTest methodsFor: 'tests' stamp: 'CarlosCastillo 4/25/2022 00:32'!test06SeRegistraUnaLlamadaInternacionalDeLargaDuracionYSeLeAplicaElDescuento	| montoEsperadoAPagar abonoMensual teleAlgo |		montoEsperadoAPagar := 136 .	abonoMensual := 100 .	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual .		teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1 .		teleAlgo registrarLlamadaInternacionalCon: 40 HechaEnElHorario: 10 Hacia: 'Nuketown' .		self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar ! !!TeleAlgoTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 11:26'!test04SeRegistranAlgunasLlamadasYSeBuscaLaLlamadaMasCostosaRealizadaYDevuelveUnaDescripcionDeLaMisma	| abonoMensual teleAlgo |	abonoMensual := 100 .	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual .		teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22 .	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17 .		self assert: ( teleAlgo consultarPorLlamadaEfectuadaMasCostosa )	equals:		'La llamada mas costosa: La llamada se hizo a las 17 hs durando 10 minutos'! !TestCase subclass: #TeleAlgoTestCatedra	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!TeleAlgoTestCatedra methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test7SeRegistraUnaLlamadaQueAlDurarMasDe30MinutosSeLeAplicaUnDescuentoDel10PorCiento	| teleAlgo abonoMensual montoEsperadoAPagar |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	montoEsperadoAPagar := 103.6.	"Act and Assert"	teleAlgo registrarLlamadaNacionalConDuracion: 40 HechaEnElHorario: 24.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTestCatedra methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test2SeRegistraUnaLlamadaNacionalEnHoraHabilYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	montoEsperadoAPagar := 102. "El abono mas el costo de todas las llamadas"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	"El horario es un numero natural que va desde la hora 1 a la hora 24"	"Act and Assert"	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar	"El precio por min en horario habil es de 0,2 $"	"El horario habil es de 8 a 20"! !!TeleAlgoTestCatedra methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test1SeFacturanLasLlamadasDeUnUsuarioQueNoRealizoLlamadasDuranteElMesYPagaSoloElAbonoMensualFijo	| montoEsperadoAPagar teleAlgo abonoMensual |		"Arrange"	montoEsperadoAPagar := 100.	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTestCatedra methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test3SeRegistraUnaLlamadaNacionallYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	montoEsperadoAPagar := 101.	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar	"El precio por min en horario no habil es de 0,1 $"! !!TeleAlgoTestCatedra methodsFor: 'tests' stamp: 'AgustinRodriguez 4/3/2022 19:43'!test6SeRegistranAlgunasLlamadasYSeBuscaLaLlamadaMasCostosaRealizadaYDevuelveUnaDescripcionDeLaMisma	| teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	teleAlgo registrarLlamadaInternacionalCon: 20 HechaEnElHorario: 24 Hacia: 'Paraguay'.	self		assert: ( teleAlgo consultarPorLlamadaEfectuadaMasCostosa )		equals:		'La llamada mas costosa: La llamada se hizo a Paraguay a las 24 hs durando 20 minutos'! !!TeleAlgoTestCatedra methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test5SeRegistraUnaLlamadaInternacionalYOtraNacionalEnHorarioHabilYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	montoEsperadoAPagar := abonoMensual + 20 + 2.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 2.	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 22 Hacia: 'Paraguay'.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTestCatedra methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test4SeRegistraUnaLlamadaInternacionalYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	montoEsperadoAPagar := 110.	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 22 Hacia: 'Uruguay'.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !