TestCase subclass: #HorarioLlamadaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!HorarioLlamadaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 10:28'!test02HorarioCreadoDentroDelHorarioHabilRetornaLaTarifaCorrecta	| tarifaHabil horario horarioHabil |		tarifaHabil := 0.2 .	horarioHabil := 10 .	horario := HorarioLlamada conTarifaHabilONoHabilconHorario: horarioHabil .		self assert: ( horario tarifa ) equals: tarifaHabil .! !!HorarioLlamadaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 10:44'!test04AlImprimirUnHorarioSeRetornaElHorarioCorrecto	| horario |		horario := ( HorarioLlamada new ) horario: 10 .		self assert: ( horario asString ) equals: '10'! !!HorarioLlamadaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 10:28'!test03HorarioCreadoFueraDelHorarioHabilRetornaLaTarifaCorrecta	| tarifaNoHabil horario horarioNoHabil |		tarifaNoHabil := 0.1 .	horarioNoHabil := 1 .	horario := HorarioLlamada conTarifaHabilONoHabilconHorario: horarioNoHabil .		self assert: ( horario tarifa ) equals: tarifaNoHabil .! !!HorarioLlamadaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 10:46'!test05NoSePuedeCrearUnHorarioFueraDelRango24Horas	| horario |		self should: [		horario := HorarioLlamada conTarifaFija: 10 conHorario: 0	] raise: HorarioInvalido! !!HorarioLlamadaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/20/2022 15:14'!test01HorarioConTarifaFijaRetornaLaTarifaCorrecta	| tarifa horaRegistro horario |		tarifa := 10 .	horaRegistro := 10 .	horario := HorarioLlamada conTarifaFija: tarifa conHorario: horaRegistro .		self assert: ( horario tarifa ) equals: tarifa .! !TestCase subclass: #LlamadaInternacionalTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 4/25/2022 00:12'!test01AlObtenerInformacionDeUnaLlamadaInternacionalSeObtieneLaInformacionCorrecta	| llamada |		llamada := LlamadaInternacional conDuracion: 10 conHorario: 10 conTarifa: 10 conDestino: 'Nuketown' .		self assert: ( llamada descripcion ) equals: 'La llamada se hizo a Nuketown a las 10 hs durando 10 minutos'	! !!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 10:59'!test03NoSePuedeCrearUnaLlamadaInternacionalSinDestino	self should: [		LlamadaInternacional conDuracion: 100 conHorario: 10 conTarifa: 1 conDestino: ''	] raise: DestinoInvalido! !!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 4/25/2022 12:48'!test02AUnaLlamadaInternacionalDeLargaDuracionSeLeAplicaElDescuento	| costoEsperado llamada |		costoEsperado := 90 .	llamada := LlamadaInternacional conDuracion: 100 conHorario: 10 conTarifa: 1 conDestino: 'Nuketown' .		self assert: ( llamada costoTotal ) equals: costoEsperado ! !!LlamadaInternacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 11:01'!test04NoSePuedeCrearUnaLlamadaInternacionalConUnHorarioInvalido	self should: [		LlamadaInternacional conDuracion: 100 conHorario: -10 conTarifa: 1 conDestino: ''	] raise: HorarioInvalido! !TestCase subclass: #LlamadaNacionalTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!LlamadaNacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 4/25/2022 00:35'!test01AlObtenerInformacionDeUnaLlamadaNacionalSeObtieneLaInformacionCorrecta	| llamada |		llamada := LlamadaNacional conDuracion: 10 conHorario: 10 .		self assert: ( llamada descripcion ) equals: 'La llamada se hizo a las 10 hs durando 10 minutos'	! !!LlamadaNacionalTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 11:00'!test02NoSePuedeUnaLlamadaNacionalConUnHorarioInvalido	self should: [		LlamadaNacional conDuracion: 100 conHorario: -10	] raise: HorarioInvalido! !TestCase subclass: #LlamadaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!LlamadaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 11:16'!test03LlamadaDeMenosDe30MinutosNoEsLlamadaDeLargaDuracion	| llamada |		llamada := Llamada new .	llamada duracion: 20 .		self deny: ( llamada esDeLargaDuracion )! !!LlamadaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 11:21'!test04LlamadaDeLargaDuracionTieneElPorcentajeDeDescuentoCorrecto	| llamada porcentajeEsperado |		porcentajeEsperado := 0.1 .	llamada := ( Llamada new ) duracion: 40 .		self assert: ( llamada calcularPorcentajeDeDescuento ) equals: porcentajeEsperado ! !!LlamadaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 11:02'!test01DuracionInvalidaAlCrearUnaLlamadaConDuracionNegativa	| llamada |		llamada := Llamada new .		self should: [			llamada duracion: -10.	] raise: DuracionInvalida ! !!LlamadaTest methodsFor: 'tests' stamp: 'CarlosCastillo 5/25/2022 11:16'!test02LlamadaDeMasDe30MinutosEsLlamadaDeLargaDuracion	| llamada |		llamada := Llamada new .	llamada duracion: 40 .		self assert: ( llamada esDeLargaDuracion )! !TestCase subclass: #TeleAlgoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!TeleAlgoTest methodsFor: 'tests' stamp: 'CarlosCastillo 4/25/2022 00:34'!test01NoSePuedeCrearUnTeleAlgoConUnAbonoMensualNegativo	| teleAlgo |		self should: [ 		teleAlgo := TeleAlgo conAbonoMensual: -69	] raise: AbonoMensualInvalido ! !!TeleAlgoTest methodsFor: 'tests' stamp: 'CarlosCastillo 4/25/2022 00:32'!test06SeRegistraUnaLlamadaInternacionalDeLargaDuracionYSeLeAplicaElDescuento	| montoEsperadoAPagar abonoMensual teleAlgo |		montoEsperadoAPagar := 136 .	abonoMensual := 100 .	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual .		teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1 .		teleAlgo registrarLlamadaInternacionalCon: 40 HechaEnElHorario: 10 Hacia: 'Nuketown' .		self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar ! !!TeleAlgoTest methodsFor: 'tests' stamp: 'CarlosCastillo 4/25/2022 00:31'!test03SeRegistranLlamadasInternacionalesSinHaberEstablecidoUnaTarifaInternacionalEstasSeFacturanSinCosto	| abonoMensual teleAlgo |		abonoMensual := 100 .	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual .		teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 10 Hacia: 'Nuketown' .	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 10 Hacia: 'Kino der Toten' .		self assert: ( teleAlgo calcularGastoFinal ) equals: abonoMensual .! !!TeleAlgoTest methodsFor: 'tests' stamp: 'CarlosCastillo 4/25/2022 00:34'!test02SinLlamadasRegistradasAlBuscarLaLlamadaMasCostosaRealizadaSinHaberRegistradoLlamadas	| teleAlgo abonoMensual |		abonoMensual := 100 .	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual .	self should: [		teleAlgo consultarPorLlamadaEfectuadaMasCostosa	] raise: SinLlamadasRegistradas ! !!TeleAlgoTest methodsFor: 'tests' stamp: 'CarlosCastillo 4/25/2022 00:31'!test05SeRegistranAlgunasLlamadasYSeCobraElMontoFinalEsperado	| montoEsperadoAPagar abonoMensual teleAlgo |		montoEsperadoAPagar := 203 .	abonoMensual := 100 .	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual .		teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 10 .		teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22 .	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17 .	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 10 Hacia: 'Yemen' .		self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar ! !!TeleAlgoTest methodsFor: 'tests' stamp: 'CarlosCastillo 4/25/2022 00:31'!test04SeRegistranAlgunasLlamadasYSeBuscaLaLlamadaMasCostosaRealizadaYDevuelveUnaDescripcionDeLaMisma	| montoEsperadoAPagar abonoMensual teleAlgo |		montoEsperadoAPagar := 102 .	abonoMensual := 100 .	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual .		teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22 .	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17 .		self assert: ( teleAlgo consultarPorLlamadaEfectuadaMasCostosa )	equals:		'La llamada mas costosa: La llamada se hizo a las 17 hs durando 10 minutos'! !TestCase subclass: #TeleAlgoTestCatedra	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!TeleAlgoTestCatedra methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test7SeRegistraUnaLlamadaQueAlDurarMasDe30MinutosSeLeAplicaUnDescuentoDel10PorCiento	| teleAlgo abonoMensual montoEsperadoAPagar |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	montoEsperadoAPagar := 103.6.	"Act and Assert"	teleAlgo registrarLlamadaNacionalConDuracion: 40 HechaEnElHorario: 24.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTestCatedra methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test2SeRegistraUnaLlamadaNacionalEnHoraHabilYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	montoEsperadoAPagar := 102. "El abono mas el costo de todas las llamadas"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	"El horario es un numero natural que va desde la hora 1 a la hora 24"	"Act and Assert"	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar	"El precio por min en horario habil es de 0,2 $"	"El horario habil es de 8 a 20"! !!TeleAlgoTestCatedra methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test1SeFacturanLasLlamadasDeUnUsuarioQueNoRealizoLlamadasDuranteElMesYPagaSoloElAbonoMensualFijo	| montoEsperadoAPagar teleAlgo abonoMensual |		"Arrange"	montoEsperadoAPagar := 100.	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTestCatedra methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test3SeRegistraUnaLlamadaNacionallYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	montoEsperadoAPagar := 101.	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar	"El precio por min en horario no habil es de 0,1 $"! !!TeleAlgoTestCatedra methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test4SeRegistraUnaLlamadaInternacionalYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	montoEsperadoAPagar := 110.	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 22 Hacia: 'Uruguay'.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTestCatedra methodsFor: 'tests' stamp: 'AgustinRodriguez 4/3/2022 19:43'!test6SeRegistranAlgunasLlamadasYSeBuscaLaLlamadaMasCostosaRealizadaYDevuelveUnaDescripcionDeLaMisma	| teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	teleAlgo registrarLlamadaInternacionalCon: 20 HechaEnElHorario: 24 Hacia: 'Paraguay'.	self		assert: ( teleAlgo consultarPorLlamadaEfectuadaMasCostosa )		equals:		'La llamada mas costosa: La llamada se hizo a Paraguay a las 24 hs durando 20 minutos'! !!TeleAlgoTestCatedra methodsFor: 'tests' stamp: 'AgustinRodriguez 4/12/2022 19:22'!test5SeRegistraUnaLlamadaInternacionalYOtraNacionalEnHorarioHabilYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |	"Arrange"	abonoMensual := 100.	montoEsperadoAPagar := abonoMensual + 20 + 2.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 2.	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 22 Hacia: 'Paraguay'.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !Object subclass: #HorarioLlamada	instanceVariableNames: 'horario tarifa'	classVariableNames: 'tarifaHabil tarifaNoHabil'	package: 'TP1'!!HorarioLlamada methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/20/2022 15:12'!asString	^ horario asString .! !!HorarioLlamada methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:38'!horario: unHorario 	( unHorario between: 1 and: 24 ) ifFalse: [ HorarioInvalido signal ] .		horario := unHorario! !!HorarioLlamada methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:33'!tarifa	^ tarifa! !!HorarioLlamada methodsFor: 'accessing' stamp: 'CarlosCastillo 5/25/2022 10:52'!initialize	tarifaHabil := 0.2 .	tarifaNoHabil := 0.1! !!HorarioLlamada methodsFor: 'accessing' stamp: 'CarlosCastillo 5/25/2022 10:33'!tarifa: unaTarifa	tarifa := unaTarifa! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HorarioLlamada class	instanceVariableNames: 'tarifa'!!HorarioLlamada class methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:37'!conTarifaHabilONoHabilconHorario: unHorario	^ self conTarifaFija: ( self tarifaSegunHorario: unHorario ) conHorario: unHorario! !!HorarioLlamada class methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:52'!tarifaSegunHorario: unHorario	( unHorario between: 8 and: 20 )		ifTrue: [ ^ tarifaHabil ]		ifFalse: [ ^ tarifaNoHabil ]! !!HorarioLlamada class methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:25'!conTarifaFija: unaTarifa conHorario: unHorario	^ ( self new )		tarifa: unaTarifa;		horario: unHorario! !Object subclass: #Llamada	instanceVariableNames: 'duracion horario porcentajeDescuentoLargaDuracion'	classVariableNames: ''	package: 'TP1'!!Llamada methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:33'!duracion: unaDuracion	unaDuracion < 0 ifTrue: [ DuracionInvalida signal ] .		duracion := unaDuracion! !!Llamada methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:32'!horario: unHorario	horario := unHorario! !!Llamada methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 11:15'!calcularMontoDescuento: montoBruto	| porcentajeDescuento |		porcentajeDescuento := self calcularPorcentajeDeDescuento .			^ montoBruto * porcentajeDescuento	! !!Llamada methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:33'!descripcion	self subclassResponsibility! !!Llamada methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:53'!costoTotal	| montoBruto |		montoBruto := ( horario tarifa ) * duracion .		^ montoBruto - ( self calcularMontoDescuento: montoBruto )! !!Llamada methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 11:15'!calcularPorcentajeDeDescuento	^ ( self esDeLargaDuracion )		ifTrue: [ porcentajeDescuentoLargaDuracion ]		ifFalse: [ 0 ]! !!Llamada methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:32'!esDeLargaDuracion	^ duracion > 30	! !!Llamada methodsFor: 'initialization' stamp: 'CarlosCastillo 5/25/2022 10:33'!initialize 	porcentajeDescuentoLargaDuracion := 0.10! !Llamada subclass: #LlamadaInternacional	instanceVariableNames: 'destino'	classVariableNames: ''	package: 'TP1'!!LlamadaInternacional methodsFor: 'initialization' stamp: 'CarlosCastillo 5/25/2022 10:34'!initialize 	super initialize.	destino := ''! !!LlamadaInternacional methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:34'!descripcion	^ 'La llamada se hizo a ' , destino , ' a las ' , horario asString , ' hs durando ' , duracion asString, ' minutos'! !!LlamadaInternacional methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:34'!destino: unDestino	unDestino ifEmpty: [ DestinoInvalido signal ] .		destino := unDestino! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LlamadaInternacional class	instanceVariableNames: ''!!LlamadaInternacional class methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/20/2022 15:14'!conDuracion: unaDuracion conHorario: unHorario conTarifa: unaTarifa conDestino: unDestino	^ ( self new )		duracion: unaDuracion ;		horario: ( HorarioLlamada conTarifaFija: unaTarifa conHorario: unHorario ) ;		destino: unDestino .	! !Llamada subclass: #LlamadaNacional	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!LlamadaNacional methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/20/2022 15:13'!descripcion 	^ 'La llamada se hizo a las ', horario asString, ' hs durando ', duracion asString, ' minutos' .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LlamadaNacional class	instanceVariableNames: ''!!LlamadaNacional class methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:34'!conDuracion: unaDuracion conHorario: unHorario	^ ( self new )		duracion: unaDuracion ;		horario: ( HorarioLlamada conTarifaHabilONoHabilconHorario: unHorario )! !Object subclass: #TeleAlgo	instanceVariableNames: 'abonoMensual llamadas tarifaInternacional'	classVariableNames: ''	package: 'TP1'!!TeleAlgo methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:34'!registrarLlamadaNacionalConDuracion: unaDuracion HechaEnElHorario: unHorario	llamadas add: ( LlamadaNacional		conDuracion: unaDuracion		conHorario: unHorario )! !!TeleAlgo methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:34'!registrarLlamadaInternacionalCon: unaDuracion HechaEnElHorario: unHorario Hacia: unDestino	llamadas add: ( LlamadaInternacional		conDuracion: unaDuracion		conHorario: unHorario		conTarifa: tarifaInternacional 		conDestino: unDestino )! !!TeleAlgo methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:34'!calcularGastoFinal	^ abonoMensual + ( llamadas sumNumbers: [ :llamada | llamada costoTotal ] )! !!TeleAlgo methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:34'!aplicarTarifaPorMinutoALlamadaInternacional: unaTarifa	tarifaInternacional := unaTarifa! !!TeleAlgo methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:34'!consultarPorLlamadaEfectuadaMasCostosa	| llamadaMasCostosa |		llamadas ifEmpty: [ SinLlamadasRegistradas signal ] .	llamadaMasCostosa := llamadas detectMax: [ :llamada | llamada costoTotal ] .		^ 'La llamada mas costosa: ', llamadaMasCostosa descripcion! !!TeleAlgo methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 5/25/2022 10:34'!abonoMensual: unAbonoMensual	unAbonoMensual < 0 ifTrue: [ AbonoMensualInvalido signal ] .		abonoMensual := unAbonoMensual! !!TeleAlgo methodsFor: 'initialization' stamp: 'CarlosCastillo 5/25/2022 10:34'!initialize	abonoMensual := 0 .	llamadas := OrderedCollection new .	tarifaInternacional := 0! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TeleAlgo class	instanceVariableNames: ''!!TeleAlgo class methodsFor: 'as yet unclassified' stamp: 'CarlosCastillo 4/25/2022 16:05'!conAbonoMensual: unAbonoMensual	^ ( self new ) abonoMensual: unAbonoMensual! !Error subclass: #AbonoMensualInvalido	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Exception'!Error subclass: #DestinoInvalido	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Exception'!Error subclass: #DuracionInvalida	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Exception'!Error subclass: #HorarioInvalido	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Exception'!Error subclass: #SinLlamadasRegistradas	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Exception'!